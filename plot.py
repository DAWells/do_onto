
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import cm
from matplotlib.colors import Normalize
import ast

from sklearn.manifold import TSNE

nodes = pd.read_csv("export.csv")
nodes['louvain'] = pd.Categorical(nodes.louvain)
nodes.louvain.value_counts()

# Convert the embedding generated by neo4j to a literal list and use
# tSNE to project that to two dimensions for plotting.
embedding = nodes.embedding.apply(lambda x: ast.literal_eval(x))
embedding = embedding.tolist()
embedding = pd.DataFrame(embedding)
tsne = TSNE()
X = tsne.fit_transform(embedding)
nodes = pd.concat([nodes, pd.DataFrame(X)], axis=1)

# Merge the embedding data with the cancer statistics
nodes.columns = pd.MultiIndex.from_tuples([('cancer', c) for c in nodes.columns])
cancer_stats = pd.read_csv("globocan_2022.csv", header=[0,1])
cancer_stats[('cancer','label')] = cancer_stats[('cancer','label')].apply(lambda x: f'"{x}"')
cancer_stats = pd.merge(
    cancer_stats,
    nodes,
    how="inner",
    on=[("cancer","label")]
)

mosaic = np.array([
    ['tsne','tsne-stat'],
    ['mort','incid']
])

fig, axes = plt.subplot_mosaic(mosaic)
axes['tsne'].scatter(
    X[:,0],
    X[:,1],
    c  = cm.tab20(Normalize()(nodes[('cancer','louvain')].cat.codes))
)
axes['tsne-stat'].scatter(
    cancer_stats[('cancer',0)],
    cancer_stats[('cancer',1)],
    s = 1000*Normalize()(cancer_stats[('incidence','New cases')]),
    c  = cm.tab20(Normalize()(cancer_stats[('cancer','louvain')].cat.codes)),
    alpha = Normalize()(cancer_stats[('mortality','Deaths')]),
)
axes['tsne-stat'].scatter(
    cancer_stats[('cancer',0)],
    cancer_stats[('cancer',1)],
    s = 1000*Normalize()(cancer_stats[('incidence','New cases')]),
    facecolors  = "none",
    edgecolors = cm.tab20(Normalize()(cancer_stats[('cancer','louvain')].cat.codes)),
)

axes['incid'].barh(
    width=cancer_stats[('incidence','New cases')],
    y=cancer_stats[('cancer', 'label')],
    color = cm.tab20(Normalize()(cancer_stats[('cancer','louvain')].cat.codes))
)
axes['mort'].barh(
    width=cancer_stats[('mortality','Deaths')],
    y=cancer_stats[('cancer', 'label')],
    color = cm.tab20(Normalize()(cancer_stats[('cancer','louvain')].cat.codes))
)
plt.show()

  